<?xml version="1.0"?>

<!--

MutateMe: A Mutation Testing Framework for PHP5

Phing Usage:

    phing [ <options> ] [ <targetnames> ]

    example:

    phing dist   ...where "dist" is the target for execution

Phing Targets:

    prepare: Creates any necessary staging directories (has .pear suffix option)

    build: Prepares and stages files (has .pear suffix option)

    stage: Stages files either copying or exporting to staging directory (has .pear suffix option)

    dist: Stages and packages files to zip and gzip tarball and PEAR TGZ package

    pearify: Create a pear package.xml and source code directory tree

	docs: Generates the HTML manual only

    clean: Cleans up, deletes staging directories, returns to state 0

Other Targets:

    src.check: Check for the existence of local source code

    svn.export: Export the source code from subversion

-->

<project name="MutateMe" default="dist" basedir=".">

    <taskdef classname="phing.tasks.ext.d51PearPkg2Task" name="d51pearpkg2" />
    <!--taskdef classname="phing.tasks.ext.PhpDocbookHighlighterTask" name="phpdocbookhighlighter" /-->

    <property name="spec.src.default" value="${project.basedir}/.." />
    <property name="spec.src.classpath" value="/library" />
    <property name="spec.name" value="MutateMe" />
    <property name="spec.version" value="0.1.0alpha" /> <!-- VERSION FOR EDITING -->
    <property name="spec.stability" value="alpha" />
    <property name="spec.stage" value="${project.basedir}/stage" />
    <property name="spec.pear" value="${project.basedir}/stage-pear" />
    <property name="spec.stage.dir" value="${spec.stage}/${spec.name}-${spec.version}" />
    <property name="spec.pear.dir" value="${spec.pear}/${spec.name}-${spec.version}" />
    <property name="spec.pear.package" value="${spec.name}-${spec.version}.tgz" />
    <property name="spec.dist" value="${project.basedir}/dist" />
    <property name="spec.dist.pear" value="${spec.dist}/PEAR" />
    <property name="spec.tarball" value="${spec.stage}/${spec.name}-${spec.version}.tar" />
    <property name="spec.tarball.pear" value="${spec.stage}/${spec.name}-${spec.version}.tgz" />
    <property name="spec.zipball" value="${spec.stage}/${spec.name}-${spec.version}.zip" />
	<property name="spec.script.unix" value="mutateme" />
	<property name="spec.script.windows" value="mutateme.bat" />
    <property name="lang" value="en" />
	<property name="languages" value="en" /> <!-- Add additional manual languages here -->
    <php expression="date('Y-m-d')" returnProperty="date"/>

	<property name="spec.manual" value="${project.basedir}/stage-manual" />
	<property name="spec.manual.dir" value="${spec.manual}/docbook" />
	<property name="spec.dist.manual" value="${spec.dist}/manual" />

    <property name="docbookxslurl"  value="http://docbook.sourceforge.net/release/xsl/current/html/chunk.xsl" />
    <property name="docbookdtdurl" value="http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" />
    <property file="build.properties" override="true" />

    <target name="build" depends="prepare, prepare.pear, stage, stage.pear">
    </target>

    <target name="build.pear" depends="prepare.pear, stage.pear">
    </target>

	<target name="build.manual" depends="prepare.manual, stage.manual">
    </target>

    <target name="src.check">
        <available file="${spec.src.default}/library/Mutateme/Framework.php" property="spec.src" value="${spec.src.default}" />
        <!--svnlastrevision svnpath="svn" repositoryurl="${spec.svn.url}" workingcopy="${project.basedir}" propertyname="spec.svn.revision" /-->
    </target>

    <target name="prepare" depends="src.check, prepare.dist">
        <echo msg="Making directory ${spec.stage}" />
        <mkdir dir="${spec.stage}" />
        <echo msg="Making directory ${spec.stage.dir}" />
        <mkdir dir="${spec.stage.dir}" />
    </target>

    <target name="prepare.pear" depends="src.check, prepare.dist">
        <echo msg="Making directory ${spec.pear}" />
        <mkdir dir="${spec.pear}" />
        <echo msg="Making directory ${spec.pear.dir}" />
        <mkdir dir="${spec.pear.dir}" />
    </target>

    <target name="prepare.dist">
        <echo msg="Making Distribution Files directory ${spec.dist}" />
        <mkdir dir="${spec.dist}" />
        <mkdir dir="${spec.dist.pear}" />
    </target>

	<target name="prepare.manual" depends="src.check">
        <echo msg="Making Manual directory ${spec.manual}" />
        <mkdir dir="${spec.manual}" />
		<echo msg="Making directory ${spec.manual.dir}" />
        <mkdir dir="${spec.manual.dir}" />

		<mkdir dir="${spec.dist.manual}" />
    </target>

    <target name="svn.export" unless="spec.src">
        <svnexport svnpath="svn" repositoryurl="${spec.svn.url}" todir="${spec.svn.export}" />
        <property name="spec.src" value="${spec.svn.export}" />
    </target>

    <target name="stage" depends="prepare, svn.export">
        <echo msg="Staging files from ${spec.src} to ${spec.stage.dir} for Standard Packaging" />
        <copy todir="${spec.stage.dir}">
            <fileset dir="${spec.src}">
                <exclude name="**/.**/**" />
                <exclude name="build/**" />
				<exclude name="docs/**" />
            </fileset>
        </copy>
    </target>

    <target name="stage.pear" depends="prepare.pear, svn.export">
        <echo msg="Staging files from ${spec.src} to ${spec.pear.dir} for PEAR Packaging" />
        <copy todir="${spec.pear.dir}">
            <fileset dir="${spec.src}">
                <exclude name="**/.**/**" />
                <exclude name="build/**" />
				<exclude name="docs/**" />
                <exclude name="library/**" />
            </fileset>
        </copy>
        <copy todir="${spec.pear.dir}">
            <fileset dir="${spec.src}${spec.src.classpath}">
                <exclude name="**/.**/**" />
            </fileset>
        </copy>
    </target>

	<target name="stage.manual" depends="prepare.manual, svn.export">
        <echo msg="Staging files from ${spec.src} to ${spec.manual.dir} for DocBook > HTML generation" />
        <copy todir="${spec.manual.dir}">
            <filterchain>
                <replacetokens>
                    <token key="DOCBOOK_XSL" value="${docbookxslurl}" />
                    <token key="DOCBOOK_DTD" value="${docbookdtdurl}" />
                </replacetokens>
            </filterchain>
            <fileset dir="${spec.src}/docs/manual">
            </fileset>
        </copy>
    </target>

    <target name="pearify" depends="build.pear">
        <d51pearpkg2 baseinstalldir="/" dir="${spec.pear.dir}">

            <name>MutateMe</name>
            <summary>A Mutation Testing framework for PHP5</summary>
            <channel>pear.php.net</channel>
            <description>
                Note: This is an alpha release for testing and feedback.

                MutateMe is a Mutation Testing framework for PHP5. Its purpose is to
                generate problems in your source code (switching booleans, assignment
                operators, values, etc.) and check if your test suite fails as a
                result. If your suite fails, it means your tests were sufficient to
                detect the problem. If, however, your tests still pass it may
                indicate the need for additional tests.

                Mutation Testing is not designed for constant use every other minute.
                It runs tests once for every mutation so it's typical speed is the
                time taken to run your test suite multiplied by the number of
                mutations it can apply. As a result, on larger libraries you might
                want to watch a movie (or three) while the Mutation Testing is
                running.
            </description>

			<date>${date}</date>

            <lead user="padraic" name="PÃ¡draic Brady" email="padraic@php.net" />
            <license>New BSD</license>

            <version release="${spec.version}" api="${spec.version}" />
            <stability release="${spec.stability}" api="${spec.stability}" />

            <dependencies>
                <php minimum_version="5.2.3" />
                <pear minimum_version="1.6.0" />
                <package name="Text_Diff"
                         channel="pear.php.net"
                         minimum_version="1.1.0" />
            </dependencies>

            <dirroles key="bin">script</dirroles>
            <dirroles key="tests">test</dirroles>
			<dirroles key="specs">test</dirroles>
			<dirroles key="docs">doc</dirroles>
            <replacement path="bin/mutateme" type="pear-config" from="@php_bin@" to="php_bin" />
            <replacement path="bin/mutateme.bat" type="pear-config" from="@php_bin@" to="php_bin" />
            <replacement path="bin/mutateme.bat" type="pear-config" from="@bin_dir@" to="bin_dir" />
            <release>
                <install as="mutateme" name="bin/mutateme" />
                <install as="mutateme.bat" name="bin/mutateme.bat" />
            </release>

            <changelog version="0.1.0alpha" date="2009-02-24" license="New BSD">
                This is an ALPHA release for testing and
                feedback only.
            </changelog>

        </d51pearpkg2>
    </target>

    <target name="dist" depends="build, pearify">
        <echo message="Creating tar and zip archives..." />
        <tar destfile="${spec.tarball}.gz" basedir="${spec.stage.dir}" compression="gzip" />
        <move file="${spec.tarball}.gz" todir="${spec.dist}" overwrite="true" />

        <echo message="ZIP archive creation is disabled in build.xml file" />
        <!--zip destfile="${spec.zipball}" basedir="${spec.stage.dir}" /-->
        <!--move file="${spec.zipball}" todir="${spec.dist}" overwrite="true" /-->

        <echo message="Creating PEAR Package..." />
        <exec command="pear package" dir="${spec.pear.dir}" />
        <move file="${spec.pear.dir}/${spec.pear.package}" todir="${spec.dist.pear}" overwrite="true" />
    </target>

    <target name="clean">
        <delete dir="${spec.stage}" />
        <delete dir="${spec.pear}" />
        <delete dir="${spec.dist}" />
		<delete dir="${spec.manual}" />
    </target>

    <target name="install" depends="dist">
        <exec command="pear install ${spec.pear.package}" dir="${spec.dist.pear}" />
    </target>

    <target name="install.force" depends="dist">
        <exec command="pear install --force ${spec.pear.package}" dir="${spec.dist.pear}" />
    </target>

	<target name="docs" depends="build.manual">
		<echo msg="Rendering manual..." />
        <foreach list="${languages}" param="lang" target="docs.lang" />
		<echo msg="Manual has been rendered." />
		<echo msg="Rendering API Docs..." />
		<mkdir dir="${spec.dist.manual}/apidocs" />
		<phpdoc title="PHPSpec API Documentation"
            destdir="${spec.dist.manual}/apidocs"
            sourcecode="${spec.src}/src"
            output="HTML:frames:DOM/earthli">
            <fileset dir="${spec.src}/src">
                <include name="**" />
            </fileset>
        </phpdoc>
		<echo msg="API Docs have been rendered." />
	</target>

	<target name="docs.lang">
		<echo msg="Rendering ${lang} language manual." />
        <copy file="${spec.manual.dir}/${lang}/html/style.css" todir="${spec.dist.manual}/${lang}" />
		<mkdir dir="${spec.dist.manual}/${lang}/images" />
		<copy file="${spec.manual.dir}/${lang}/images/note.png" todir="${spec.dist.manual}/${lang}/images" />
		<copy todir="${spec.dist.manual}/${lang}/">
		  <filterchain>
			<xincludefilter basedir="${spec.manual.dir}/${lang}/" />
			<xsltfilter style="${spec.manual.dir}/${lang}/html.xsl">
			  <param name="base.dir" expression="${spec.dist.manual}/${lang}/" />
			</xsltfilter>
		  </filterchain>
		  <fileset dir="${spec.manual.dir}/${lang}/">
			<include name="manual.xml" />
		  </fileset>
		</copy>
        <phpdocbookhighlighter dir="${spec.dist.manual}/${lang}/" />
		<echo msg="Manual for ${lang} language has been rendered." />
	</target>

    <target name="dist.docs" depends="docs">
        <copy todir="${spec.stage.dir}/docs/manual">
            <fileset dir="${spec.dist.manual}">
            </fileset>
        </copy>
        <copy todir="${spec.pear.dir}/docs/manual">
            <fileset dir="${spec.dist.manual}">
            </fileset>
        </copy>
    </target>

</project>
